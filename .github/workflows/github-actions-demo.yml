name: GitHub Actions Demo
run-name: ${{ github.actor }} is learning Terraform and GitHub Actions with RS School ðŸš€
on:
  workflow_dispatch:
permissions:
  id-token: write # Required for requesting the JWT token
  contents: read  # Required for actions/checkout
env:
  BUCKET_NAME: "terraformstates-1"
  AWS_REGION: "eu-north-1"
jobs:
  terraform-check:
    name: Check Terraform Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Run terraform fmt
        working-directory: ./terraform
        run: terraform fmt

      - name: Run terraform fmt check
        run: terraform fmt -check

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init 

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init 

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Get Terraform output
        working-directory: ./terraform
        id: get_output
        run: echo "::set-output name=k3s_master_public_ip::$(terraform output -raw k3s_master_public_ip)"

  deploy-jenkins:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI to interact with EC2 and configure kubectl
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1  # Update with your region

      # Step 3: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.23.5/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Step 4: Connect to EC2 instance and configure kubectl to access K3s
      - name: Configure kubectl to access K3s
        run: |
          # Assuming you are using SSH key to access the EC2 instance
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Copy K3s kubeconfig from the K3s node to the GitHub runner
            sudo cat /etc/rancher/k3s/k3s.yaml > kubeconfig
            export KUBECONFIG=kubeconfig
          EOF

      # Step 5: Deploy Jenkins using kubectl
      - name: Deploy Jenkins using kubectl
        run: |
          kubectl apply -f kubernetes/jenkins-deployment.yaml

      # Optional Step 6: Verify if the Jenkins deployment is successful
      - name: Verify Jenkins deployment
        run: |
          kubectl rollout status deployment/jenkins -n default