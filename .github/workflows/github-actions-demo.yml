name: GitHub Actions Demo
run-name: ${{ github.actor }} is learning Terraform and GitHub Actions with RS School ðŸš€
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  id-token: write # Required for requesting the JWT token
  contents: read  # Required for actions/checkout
env:
  BUCKET_NAME: "terraformstates-1"
  AWS_REGION: "eu-north-1"
jobs:
  terraform-check:
    name: Check Terraform Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Run terraform fmt
        working-directory: ./terraform
        run: terraform fmt

      - name: Run terraform fmt check
        run: terraform fmt -check

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init 

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init 

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Get Terraform output
        working-directory: ./terraform
        id: get_output
        run: echo "::set-output name=k3s_master_public_ip::$(terraform output -raw k3s_master_public_ip)"

  fetch-kubeconfig:
    name: Fetch Kubeconfig from K3s Master
    runs-on: ubuntu-latest
    needs: terraform-apply

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: SSH into K3s Master and Get Kubeconfig
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 51.21.129.190 >> ~/.ssh/known_hosts
          scp -i ~/.ssh/id_rsa ubuntu@51.21.129.190:/etc/rancher/k3s/k3s.yaml k3s.yaml
          sed -i "s/127.0.0.1/51.21.129.190/" k3s.yaml
          base64 k3s.yaml | tr -d '\n' > kubeconfig_base64.txt 

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
        
      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "${GITHUB_TOKEN}" | gh auth login --with-token
        
      - name: Save Kubeconfig as GitHub Secret
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_BASE64 }}
        run: |
          echo "${KUBECONFIG_DATA}" | gh secret set KUBECONFIG_DATA --body -
  helm-deploy:
    name: Deploy WordPress using Helm
    runs-on: ubuntu-latest
    needs: fetch-kubeconfig

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::222634386594:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.27.0'

      - name: Configure kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}
        run: |
          echo "${KUBECONFIG_DATA}" | base64 -d > ~/.kube/config

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Deploy WordPress with Helm
        env:
          WORDPRESS_USERNAME: ${{ secrets.WORDPRESS_USERNAME }}
          WORDPRESS_PASSWORD: ${{ secrets.WORDPRESS_PASSWORD }}
          WORDPRESS_EMAIL: ${{ secrets.WORDPRESS_EMAIL }}
        run: |
          helm upgrade --install my-wordpress ./chart-path \
            --set wordpressUsername=$WORDPRESS_USERNAME \
            --set wordpressPassword=$WORDPRESS_PASSWORD \
            --set wordpressEmail=$WORDPRESS_EMAIL \
            --set service.type=LoadBalancer \
            --set service.port=8080
